import{_ as t,c as d,o as e,a6 as o}from"./chunks/framework.tp-41Ed0.js";const m=JSON.parse('{"title":"Props","description":"","frontmatter":{},"headers":[],"relativePath":"guide/props.md","filePath":"guide/props.md"}'),c={name:"guide/props.md"},r=o('<h1 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props&quot;">​</a></h1><h2 id="required-props" tabindex="-1">Required props <a class="header-anchor" href="#required-props" aria-label="Permalink to &quot;Required props&quot;">​</a></h2><table><thead><tr><th><strong>Prop</strong></th><th><strong>Type</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>data-key</code></td><td><code>String</code></td><td>The unique identifier of each piece of data, in the form of <code>&#39;a.b.c&#39;</code></td></tr><tr><td><code>v-model</code></td><td><code>Array | Ref</code></td><td>The data that needs to be rendered</td></tr></tbody></table><h2 id="optional-props" tabindex="-1">Optional props <a class="header-anchor" href="#optional-props" aria-label="Permalink to &quot;Optional props&quot;">​</a></h2><p><strong>Commonly used</strong></p><table><thead><tr><th><strong>Prop</strong></th><th><strong>Type</strong></th><th><strong>Default</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>keeps</code></td><td><code>Number</code></td><td><code>30</code></td><td>The number of lines rendered by the virtual scroll</td></tr><tr><td><code>size</code></td><td><code>Number</code></td><td><code>-</code></td><td>The estimated height of each piece of data, you can choose to pass it or not, it will be automatically calculated</td></tr><tr><td><code>handle</code></td><td><code>Function/String</code></td><td><code>-</code></td><td>Drag handle selector within list items</td></tr><tr><td><code>group</code></td><td><code>Function/String</code></td><td><code>-</code></td><td>string: &#39;name&#39; or object: <code>{ name: &#39;group&#39;, put: true/false, pull: true/false/&#39;clone&#39;, revertDrag: true/false }</code></td></tr><tr><td><code>keepOffset</code></td><td><code>Boolean</code></td><td><code>false</code></td><td>When scrolling up to load data, keep the same offset as the previous scroll</td></tr><tr><td><code>direction</code></td><td><code>vertical | horizontal</code></td><td><code>vertical</code></td><td>Scroll direction</td></tr><tr><td><code>scroller</code></td><td><code>Document | HTMLElement</code></td><td><code>-</code></td><td>Virtual list scrolling element</td></tr><tr><td><code>lockAxis</code></td><td><code>x | y</code></td><td><code>-</code></td><td>Axis on which dragging will be locked</td></tr><tr><td><code>debounceTime</code></td><td><code>Number</code></td><td><code>0</code></td><td>debounce time on scroll</td></tr><tr><td><code>throttleTime</code></td><td><code>Number</code></td><td><code>0</code></td><td>throttle time on scroll</td></tr></tbody></table><p><strong>Uncommonly used</strong></p><table><thead><tr><th><strong>Prop</strong></th><th><strong>Type</strong></th><th><strong>Default</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><code>sortable</code></td><td><code>Boolean</code></td><td><code>true</code></td><td>Whether the current list can be sorted by dragging</td></tr><tr><td><code>draggable</code></td><td><code>String</code></td><td><code>.virtual-dnd-list-item</code></td><td>Specifies which items inside the element should be draggable</td></tr><tr><td><code>disabled</code></td><td><code>Boolean</code></td><td><code>false</code></td><td>Disables the sortable if set to true</td></tr><tr><td><code>animation</code></td><td><code>Number</code></td><td><code>150</code></td><td>Animation speed moving items when sorting</td></tr><tr><td><code>autoScroll</code></td><td><code>Boolean</code></td><td><code>true</code></td><td>Automatic scrolling when moving to the edge of the container</td></tr><tr><td><code>scrollThreshold</code></td><td><code>Number</code></td><td><code>55</code></td><td>Threshold to trigger autoscroll</td></tr><tr><td><code>delay</code></td><td><code>Number</code></td><td><code>0</code></td><td>Time in milliseconds to define when the sorting should start</td></tr><tr><td><code>delayOnTouchOnly</code></td><td><code>Boolean</code></td><td><code>false</code></td><td>Only delay on press if user is using touch</td></tr><tr><td><code>fallbackOnBody</code></td><td><code>Boolean</code></td><td><code>false</code></td><td>Appends the ghost element into the document&#39;s body</td></tr><tr><td><code>rootTag</code></td><td><code>String</code></td><td><code>div</code></td><td>Label type for root element</td></tr><tr><td><code>wrapTag</code></td><td><code>String</code></td><td><code>div</code></td><td>Label type for list wrap element</td></tr><tr><td><code>wrapClass</code></td><td><code>String</code></td><td><code>&#39;&#39;</code></td><td>List wrapper element class</td></tr><tr><td><code>wrapStyle</code></td><td><code>Object</code></td><td><code>{}</code></td><td>List wrapper element style</td></tr><tr><td><code>ghostClass</code></td><td><code>String</code></td><td><code>&#39;&#39;</code></td><td>The class of the mask element when dragging</td></tr><tr><td><code>ghostStyle</code></td><td><code>Object</code></td><td><code>{}</code></td><td>The style of the mask element when dragging</td></tr><tr><td><code>chosenClass</code></td><td><code>String</code></td><td><code>&#39;&#39;</code></td><td>Class name for the chosen item</td></tr></tbody></table>',8),a=[r];function s(n,l,i,h,p,g){return e(),d("div",null,a)}const b=t(c,[["render",s]]);export{m as __pageData,b as default};
